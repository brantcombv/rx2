<?php

class Rx_Model_Translate_Sections extends Rx_Model_Collection
{
    /**
     * Name of corresponding Rx_Model_Entity based class (named Id to use for Rx_ModelManager)
     *
     * @var string $_entityClassName
     */
    protected $_entityClassName = 'translate_section';
    /**
     * Name of collection item class (it should be based on Rx_Struct_Model_Abstract)
     *
     * @var string $_itemClassName
     */
    protected $_itemClassName = 'Rx_Struct_Model_Translate_Section';
    /**
     * Name of database table that is represented by collection object
     *
     * @var string $_dbTableName
     */
    protected $_dbTableName = 'text_sections';
    /**
     * true if database Id is auto-generated on inserting new row in database,
     * false if database Id is defined manually
     *
     * @var boolean $_autoGeneratedDbId
     */
    protected $_autoGeneratedDbId = false;
    /**
     * true if collection item deleting is done by setting value to database table column,
     * false if item deletion is done by actually deleting row from database
     *
     * @var boolean $_haveDeletedColumn
     */
    protected $_haveDeletedColumn = true;

    /**
     * Get list of columns to fetch from database with information fetching SQL query
     * for given type of information request
     *
     * @param string $type  Type of information request
     * @param mixed $params Additional request parameters
     * @param array $config Configuration options
     * @return array                    Array with list of columns
     */
    protected function _getItemsFetchingQueryColumns($type, $params, $config)
    {
        $columns = array();
        switch ($type) {
            default:
                $columns = array('id', 'can_have_subids', 'can_have_patches', 'raw_keys_allowed');
                if ($config['get_descriptions']) {
                    $columns[] = 'description';
                }
                break;
        }
        return ($columns);
    }

    /**
     * Create item structure object by provided information from database (or other data source)
     *
     * @param array $data   Data to create item object from
     * @param array $config Configuration options
     * @return Rx_Struct_Model_Abstract|null|false  Created item on success, null if item can't be created for some reason, false in a case of error
     */
    protected function _createItem($data, $config)
    {
        $item = new Rx_Struct_Model_Translate_Section(array(
            'id'      => $data['id'],
            'subids'  => $data['can_have_subids'],
            'patches' => $data['can_have_patches'],
            'raw'     => $data['raw_keys_allowed'],
        ));
        if ($config['get_descriptions']) {
            $item->description = $data['description'];
        }
        return ($item);
    }

    /**
     * Initialize list of configuration options
     */
    protected function _initConfig()
    {
        parent::_initConfig();
        $this->_mergeConfig(array(
            'get_descriptions' => false, // true to get descriptions for text sections
        ));
    }

    /**
     * Check that given value of configuration option is valid
     *
     * @param string $name      Configuration option name
     * @param mixed $value      Option value (passed by reference)
     * @param string $operation Current operation Id
     * @return boolean
     */
    protected function _checkConfig($name, &$value, $operation)
    {
        switch ($name) {
            case 'get_descriptions':
                $value = (boolean)$value;
                break;
            default:
                return (parent::_checkConfig($name, $value, $operation));
                break;
        }
        return (true);
    }

}
